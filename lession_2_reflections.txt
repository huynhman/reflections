What happens when you initialize a repository? Why do you need to do it?

It creates a .git file in the folder. This .git folder is data for the repository
in other words the .git folder contains hsitory data of all of your files (commits)
in the folder. THis is essential in keeping track of the different versions
of your files over time. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is between the workign directory and repository. Working directory is located on your hard drive
and the repository is the data history of the filessssss. Staging area may be useful beacuse
it ensures the suer knows exactly what he coomits to the repositroy before doign so. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful when you want to create different working versions of your
files. This can be to experiment or create big changes in your working models.
you can also use branch names to create backup versiosn of your files that you 
deemed important to return to at some point in the future

How do the diagrams help you visualize the branch structure?

Diagrams help us understand the logs that are parents of other logs and helps
us know what log history will be displayed when we git log in a branch. 
COmmits made in a branch will not show in a git log output of another branch
New branches will also not be shown in a brnahc git log output
Shows us what history we will be looking at in a branch, or master

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together adds all fo teh changes from two branches together into all of the files
All of the deletions and edditiosn are kept combined into a present commit.
We can then look at the log of both branch historyies and delete one of the branch labels since the
branch has been merged into the master (the current head or checkout).

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?


PRos of automatic merging, al of the simple similarities and differences i.e. additiosn and deletiions that are
not in conflict will be added and deleted in the new commit. 
Con of automatic merging is that it doesnt resolve coommits where there are edits to the same file that makes the file differnet from each other ina 
conflicting way.
Manual merging is more tedious which is bad, but it resolves and gives more controlt hte programmer, but he can resolve
conflicts more easily.